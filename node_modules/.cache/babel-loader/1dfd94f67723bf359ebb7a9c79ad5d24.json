{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ahmet\\\\Desktop\\\\Spring\\\\SpringReact\\\\frontend\\\\src\\\\pages\\\\UserSignUpPage.js\";\nimport React from \"react\";\nimport { signup } from \"../api/apiCalls\";\nimport Input from \"../components/input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass UserSignUpPage extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      //Comes from React.components\n      username: null,\n      displayName: null,\n      password: null,\n      passwordRepeat: null,\n      pendingApiCall: false,\n      errors: {}\n    };\n\n    this.onChange = event => {\n      const {\n        name,\n        value\n      } = event.target;\n      const errors = { ...this.state.errors\n      };\n      errors[name] = undefined; // Shorthand \n      //const value = event.target.value;\n      //const nameField = event.target.name;\n\n      this.setState({\n        [name]: value,\n        errors\n      });\n    };\n\n    this.onClickSignUp = async event => {\n      event.preventDefault(); //We block browser\n\n      const {\n        username,\n        displayName,\n        password,\n        passwordRepeat\n      } = this.state;\n      const body = {\n        username,\n        displayName,\n        password,\n        passwordRepeat\n      };\n      this.setState({\n        pendingApiCall: true\n      });\n\n      try {\n        const response = await signup(body);\n      } catch (error) {\n        if (error.response.data.validationErrors) // we dont want to set errors to null\n          this.setState({\n            errors: error.response.data.validationErrors\n          });\n      }\n\n      this.setState({\n        pendingApiCall: false\n      });\n    };\n  }\n\n  // We used then and catch because we need to wait for asyn response than wait for the result\n  // signup(body).then(responce =>{\n  //     this.setState({pendingApiCall: false});\n  // }).catch(error => {\n  //     this.setState({pendingApiCall: false});\n  // });\n  render() {\n    const {\n      pendingApiCall,\n      errors\n    } = this.state; // we dont want to use this.state.pendingApiCall everytime\n\n    const {\n      username,\n      displayName,\n      password\n    } = errors;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"needs-validation\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-center\",\n          children: \"Sign Up Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          name: \"username\",\n          label: \"Username\",\n          error: username,\n          onChange: this.onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          name: \"displayName\",\n          label: \"Display Name\",\n          error: displayName,\n          onChange: this.onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          name: \"password\",\n          label: \"Password\",\n          error: password,\n          onChange: this.onChange,\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Password Repeat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"passwordRepeat\",\n            className: \"form-control\",\n            type: \"password\",\n            onChange: this.onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spacer5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary\",\n            onClick: this.onClickSignUp,\n            disabled: pendingApiCall,\n            children: [pendingApiCall && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"spinner-border spinner-border-sm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 40\n            }, this), \" Sign Up\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this);\n  } //this named conditional rendering this.state.pendingApiCall && <span className=\"spinner-border spinner-border-sm\"></span>\n  // We dont want to repeat our code \n  // onChangeUsername = event => {\n  //     this.setState({\n  //         username: event.target.value\n  //     });\n  // };\n  // onChangeDisplayName = event => {\n  //     this.setState({\n  //         displayname: event.target.value\n  //     });\n  // };\n  // onChangePassword = event => {\n  //     this.setState({\n  //         password: event.target.value\n  //     });\n  // };\n  // onChangePasswordRepeat = event => {\n  //     this.setState({\n  //         passwordRepeat: event.target.value\n  //     });\n  // };\n\n\n}\n\nexport default UserSignUpPage;","map":{"version":3,"sources":["C:/Users/ahmet/Desktop/Spring/SpringReact/frontend/src/pages/UserSignUpPage.js"],"names":["React","signup","Input","UserSignUpPage","Component","state","username","displayName","password","passwordRepeat","pendingApiCall","errors","onChange","event","name","value","target","undefined","setState","onClickSignUp","preventDefault","body","response","error","data","validationErrors","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { signup } from \"../api/apiCalls\";\r\nimport Input from \"../components/input\";\r\nclass UserSignUpPage extends React.Component{\r\n\r\n    state = {//Comes from React.components\r\n        username: null,\r\n        displayName: null,\r\n        password: null,\r\n        passwordRepeat: null,\r\n        pendingApiCall: false,\r\n        errors:{\r\n\r\n        }\r\n    };\r\n  \r\n\r\n    onChange = event => {\r\n        const { name, value} = event.target\r\n        const errors = { ...this.state.errors};\r\n        errors[name] = undefined;\r\n        // Shorthand \r\n        //const value = event.target.value;\r\n        //const nameField = event.target.name;\r\n        this.setState({\r\n            [name]: value,\r\n            errors\r\n        })\r\n    }\r\n    \r\n    onClickSignUp = async event =>{\r\n        event.preventDefault();//We block browser\r\n\r\n        const { username, displayName, password, passwordRepeat} = this.state;\r\n\r\n        const body = {\r\n            username,\r\n            displayName,\r\n            password,\r\n            passwordRepeat\r\n        };\r\n\r\n        this.setState({pendingApiCall: true});\r\n        \r\n        try{\r\n            const response = await signup(body);\r\n        }catch (error){\r\n            if (error.response.data.validationErrors)// we dont want to set errors to null\r\n                this.setState({errors: error.response.data.validationErrors});\r\n        }\r\n        this.setState({pendingApiCall: false});\r\n    }\r\n        // We used then and catch because we need to wait for asyn response than wait for the result\r\n        // signup(body).then(responce =>{\r\n        //     this.setState({pendingApiCall: false});\r\n        // }).catch(error => {\r\n        //     this.setState({pendingApiCall: false});\r\n        // });\r\n\r\n    render(){\r\n        const { pendingApiCall, errors } = this.state;// we dont want to use this.state.pendingApiCall everytime\r\n        const { username, displayName, password} = errors;\r\n        return(\r\n        <div className = \"container\">\r\n            <form className=\"needs-validation\">\r\n                <h1 className=\"text-center\">Sign Up Page</h1>\r\n                <Input name=\"username\" label=\"Username\" error={username} onChange={this.onChange}/>\r\n                <Input name=\"displayName\" label=\"Display Name\" error={displayName} onChange={this.onChange}/>\r\n                <Input name=\"password\" label=\"Password\" error={password} onChange={this.onChange} type=\"password\"/>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-label\">Password Repeat</label>\r\n                    <input name=\"passwordRepeat\" className=\"form-control\" type=\"password\" onChange={this.onChange}/>\r\n                </div>\r\n                <div className=\"spacer5\"></div>\r\n                <div className=\"text-center\">\r\n                    <button className=\"btn btn-secondary\" onClick={this.onClickSignUp} disabled={pendingApiCall}>\r\n                    {pendingApiCall && <span className=\"spinner-border spinner-border-sm\"></span>} Sign Up \r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        );\r\n    }\r\n    //this named conditional rendering this.state.pendingApiCall && <span className=\"spinner-border spinner-border-sm\"></span>\r\n\r\n    // We dont want to repeat our code \r\n    // onChangeUsername = event => {\r\n    //     this.setState({\r\n    //         username: event.target.value\r\n    //     });\r\n    // };\r\n\r\n    // onChangeDisplayName = event => {\r\n    //     this.setState({\r\n    //         displayname: event.target.value\r\n    //     });\r\n    // };\r\n    \r\n    // onChangePassword = event => {\r\n    //     this.setState({\r\n    //         password: event.target.value\r\n    //     });\r\n    // };\r\n\r\n    // onChangePasswordRepeat = event => {\r\n    //     this.setState({\r\n    //         passwordRepeat: event.target.value\r\n    //     });\r\n    // };\r\n\r\n}\r\n\r\nexport default UserSignUpPage;"]},"metadata":{},"sourceType":"module"}