[{"C:\\Users\\ahmet\\Desktop\\Spring\\SpringReact\\frontend\\src\\index.js":"1","C:\\Users\\ahmet\\Desktop\\Spring\\SpringReact\\frontend\\src\\App.js":"2","C:\\Users\\ahmet\\Desktop\\Spring\\SpringReact\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\ahmet\\Desktop\\Spring\\SpringReact\\frontend\\src\\pages\\UserSignUpPage.js":"4","C:\\Users\\ahmet\\Desktop\\Spring\\SpringReact\\frontend\\src\\api\\apiCalls.js":"5"},{"size":600,"mtime":1636251678947,"results":"6","hashOfConfig":"7"},{"size":528,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":3875,"mtime":1636252465265,"results":"10","hashOfConfig":"7"},{"size":114,"mtime":1636251986745,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"age4jm",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ahmet\\Desktop\\Spring\\SpringReact\\frontend\\src\\index.js",["25"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './bootstrap-override.scss';\nimport reportWebVitals from './reportWebVitals';\nimport UserSignUpPage from './pages/UserSignUpPage';\n\nReactDOM.render(\n  <React.StrictMode>\n    <UserSignUpPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","C:\\Users\\ahmet\\Desktop\\Spring\\SpringReact\\frontend\\src\\App.js",[],["26","27"],"C:\\Users\\ahmet\\Desktop\\Spring\\SpringReact\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\ahmet\\Desktop\\Spring\\SpringReact\\frontend\\src\\pages\\UserSignUpPage.js",["28"],"import React from \"react\";\r\nimport { signup } from \"../api/apiCalls\";\r\n\r\nclass UserSignUpPage extends React.Component{\r\n\r\n    state = {//Comes from React.components\r\n        username: null,\r\n        displayName: null,\r\n        password: null,\r\n        passwordRepeat: null,\r\n        pendingApiCall: false\r\n    };\r\n  \r\n\r\n    onChange = event => {\r\n        const { name, value} = event.target\r\n        // Shorthand \r\n        //const value = event.target.value;\r\n        //const nameField = event.target.name;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n    \r\n    onClickSignUp = async event =>{\r\n        event.preventDefault();//We block browser\r\n\r\n        const { username, displayName, password, passwordRepeat} = this.state;\r\n\r\n        const body = {\r\n            username,\r\n            displayName,\r\n            password,\r\n            passwordRepeat\r\n        };\r\n\r\n        this.setState({pendingApiCall: true});\r\n        \r\n        try{\r\n            const response = await signup(body);\r\n        }catch (error){ }\r\n        this.setState({pendingApiCall: false});\r\n\r\n        // We used then and catch because we need to wait for asyn response than wait for the result\r\n        // signup(body).then(responce =>{\r\n        //     this.setState({pendingApiCall: false});\r\n        // }).catch(error => {\r\n        //     this.setState({pendingApiCall: false});\r\n        // });\r\n    }\r\n\r\n    render(){\r\n        const { pendingApiCall } = this.state;// we dont want to use this.state.pendingApiCall everytime\r\n        return(\r\n        <div className = \"container\">\r\n            <form>\r\n                <h1 className=\"text-center\">Sign Up Page</h1>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-label\">Username</label>\r\n                    <input name=\"username\" className=\"form-control\" onChange={this.onChange}/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-label\">Display Name</label>\r\n                    <input name=\"displayName\" className=\"form-control\" onChange={this.onChange}/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-label\">Password</label>\r\n                    <input name=\"password\"type=\"password\" className=\"form-control\" onChange={this.onChange}/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-label\">Password Repeat</label>\r\n                    <input name=\"passwordRepeat\" className=\"form-control\" type=\"password\" onChange={this.onChange}/>\r\n                </div>\r\n                <div className=\"spacer5\"></div>\r\n                <div className=\"text-center\">\r\n                    <button className=\"btn btn-secondary\" onClick={this.onClickSignUp} disabled={pendingApiCall}>\r\n                    {pendingApiCall && <span className=\"spinner-border spinner-border-sm\"></span>} Sign Up \r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        );\r\n    }\r\n    //this named conditional rendering this.state.pendingApiCall && <span className=\"spinner-border spinner-border-sm\"></span>\r\n\r\n    // We dont want to repeat our code \r\n    // onChangeUsername = event => {\r\n    //     this.setState({\r\n    //         username: event.target.value\r\n    //     });\r\n    // };\r\n\r\n    // onChangeDisplayName = event => {\r\n    //     this.setState({\r\n    //         displayname: event.target.value\r\n    //     });\r\n    // };\r\n    \r\n    // onChangePassword = event => {\r\n    //     this.setState({\r\n    //         password: event.target.value\r\n    //     });\r\n    // };\r\n\r\n    // onChangePasswordRepeat = event => {\r\n    //     this.setState({\r\n    //         passwordRepeat: event.target.value\r\n    //     });\r\n    // };\r\n\r\n}\r\n\r\nexport default UserSignUpPage;","C:\\Users\\ahmet\\Desktop\\Spring\\SpringReact\\frontend\\src\\api\\apiCalls.js",[],{"ruleId":"29","severity":1,"message":"30","line":4,"column":8,"nodeType":"31","messageId":"32","endLine":4,"endColumn":11},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"29","severity":1,"message":"37","line":40,"column":19,"nodeType":"31","messageId":"32","endLine":40,"endColumn":27},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["38"],"no-negated-in-lhs",["39"],"'response' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]